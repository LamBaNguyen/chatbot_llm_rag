from huggingface_hub import InferenceClient
import numpy as np
# from sklearn.metrics.pairwise import cosine_similarity
import os

# L∆∞u token Hugging Face c·ªßa b·∫°n
token = os.getenv("YOUR_HF_API_TOKEN")
if not token:
    raise ValueError("Kh√¥ng t√¨m th·∫•y Hugging Face API token. B·∫°n c·∫ßn set bi·∫øn m√¥i tr∆∞·ªùng 'YOUR_HF_API_TOKEN' ho·∫∑c g√°n tr·ª±c ti·∫øp.")

# Kh·ªüi t·∫°o InferenceClient
client = InferenceClient(token=token)

# H√†m get_embedding (d√πng InferenceClient ƒë·ªÉ g·ªçi API)
def get_embedding(text: str):
    if not text or not isinstance(text, str):
        raise ValueError("‚ùå ƒê·∫ßu v√†o ph·∫£i l√† m·ªôt chu·ªói vƒÉn b·∫£n h·ª£p l·ªá.")

    try:
        # L·∫•y embedding t·ª´ API
        embedding_vector = client.feature_extraction(
            text,
            model="sentence-transformers/paraphrase-multilingual-MiniLM-L12-v2"
        )
        # Chuy·ªÉn embedding th√†nh list
        embedding_vector = np.array(embedding_vector).tolist()

        # Ki·ªÉm tra chi·ªÅu c·ªßa vector (th∆∞·ªùng l√† 384 v·ªõi MiniLM-L12-v2)
        # if len(embedding_vector) != 384:
        #     raise ValueError(f"‚ùó Vector tr·∫£ v·ªÅ c√≥ chi·ªÅu kh√¥ng ƒë√∫ng: {len(embedding_vector)}. D·ªØ li·ªáu ƒë·∫ßu v√†o: '{text}'")

        return embedding_vector

    except Exception as e:
        raise RuntimeError(f"üö´ L·ªói khi g·ªçi Hugging Face API: {e}")

# # Test th·ª≠
# if __name__ == "__main__":
    while True:
        sample_text = input("\nüí¨ Nh·∫≠p vƒÉn b·∫£n (ho·∫∑c g√µ 'exit' ƒë·ªÉ tho√°t): ")
        if sample_text.lower() == 'exit':
            break
        try:
            embedding = get_embedding(sample_text)
            print(f"‚úÖ Vector embedding c√≥ {len(embedding)} chi·ªÅu:")
            print(embedding[:5], "...")  # In th·ª≠ 5 ph·∫ßn t·ª≠ ƒë·∫ßu

            # T√≠nh ƒë·ªô t∆∞∆°ng ƒë·ªìng v·ªõi c√°c c√¢u kh√°c
            source_sentence = "That is a happy person"
            sentences = [
                "That is a happy dog",
                "That is a very happy person",
                "Today is a sunny day"
            ]

            if sample_text == source_sentence:
                source_embedding = embedding
                for sentence in sentences:
                    sentence_embedding = get_embedding(sentence)
                    similarity = cosine_similarity(
                        np.array(source_embedding).reshape(1, -1),
                        np.array(sentence_embedding).reshape(1, -1)
                    )[0][0]
                    print(f"\nC√¢u: '{sentence}'")
                    print(f"ƒê·ªô t∆∞∆°ng ƒë·ªìng: {similarity:.4f}")

        except Exception as err:
            print(f"[ERROR]: {err}")