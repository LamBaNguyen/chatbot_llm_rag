from typing import List, Dict
from pydantic import BaseModel
from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
# from llm import semantic_search, generate_response, classify_query_intent, client
from llm_cloud import semantic_search, generate_response, classify_query_intent, client, set_model_name
import time
import asyncio
import os

app = FastAPI()
# port = int(os.getenv("PORT", 8000))

# Cho ph√©p CORS ƒë·ªÉ React k·∫øt n·ªëi
app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:3000","https://aidulichbinhdinh-nbl.onrender.com"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# ƒê·ªãnh nghƒ©a model cho request body
class ChatRequest(BaseModel):
    query: str
    history: List[Dict[str, str]]
class SetModelRequest(BaseModel):
    model_name: str
    
# ===== API ƒë·ªïi model =====
@app.post("/set_model")
async def set_model(request: SetModelRequest):
    try:
        set_model_name(request.model_name)
        print(f"‚úÖ ƒê√£ ƒë·ªïi model th√†nh: {request.model_name}")
        return {"message": f"ƒê√£ ƒë·ªïi model th√†nh {request.model_name}"}
    except Exception as e:
        print(f"‚ùå L·ªói ƒë·ªïi model: {str(e)}")
        raise HTTPException(status_code=500, detail=str(e))
    
@app.post("/chat")
async def chat(request: ChatRequest):
    start_time = time.time()  # B·∫Øt ƒë·∫ßu ƒëo t·ªïng th·ªùi gian
    
    try:
        async with asyncio.timeout(30):  # Timeout sau 30 gi√¢y
            query = request.query
            history = request.history

            if not query.strip():
                total_time = time.time() - start_time
                print(f"Total processing time: {total_time:.2f}s")
                return {"response": "Vui l√≤ng nh·∫≠p c√¢u h·ªèi!", "error": True, "source": None}
            
            # Ph√¢n lo·∫°i intent c√¢u h·ªèi
            intent = classify_query_intent(query, client)
            # print(f"Intent detected: {intent}")
            if intent == "greeting":
                return {"response": "ü•∞ Ch√†o b·∫°n nha! M√¨nh lu√¥n s·∫µn s√†ng h·ªó tr·ª£ n·∫øu b·∫°n c·∫ßn t√¨m hi·ªÉu v·ªÅ du l·ªãch B√¨nh ƒê·ªãnh n√®!", "error": False, "source": "greeting"}
            elif intent == "unrelated":
                return {"response": "üò• Xin l·ªói, c√¢u h·ªèi c·ªßa b·∫°n n·∫±m ngo√†i lƒ©nh v·ª±c du l·ªãch, vƒÉn h√≥a, l·ªãch s·ª≠ B√¨nh ƒê·ªãnh. B·∫°n th·ª≠ h·ªèi m√¨nh nh·ªØng c√¢u li√™n quan ƒë·∫øn v√πng ƒë·∫•t n√†y nha!", "error": False, "source": "general"}

            # ƒêo th·ªùi gian cho semantic_search
            search_start = time.time()
            context, error = semantic_search(query)
            search_time = time.time() - search_start
            print(f"semantic_search took {search_time:.2f}s")
            
            if error:
                total_time = time.time() - start_time
                print(f"Total processing time: {total_time:.2f}s")
                return {"response": error, "error": True, "source": None}
            
            # X√°c ƒë·ªãnh ngu·ªìn d·ª±a tr√™n context
            # source = "elasticsearch" if context else "openai"
            
            # ƒêo th·ªùi gian cho generate_response
            generate_start = time.time()
            response, error = generate_response(query, context, history, client)
            generate_time = time.time() - generate_start
            print(f"generate_response took {generate_time:.2f}s")
            
            if error:
                total_time = time.time() - start_time
                print(f"Total processing time: {total_time:.2f}s")
                return {"response": error, "error": True, "source": None}
            
            # In t·ªïng th·ªùi gian v√† ngu·ªìn
            total_time = time.time() - start_time
            print(f"Total processing time: {total_time:.2f}s")
            # print(f"Ngu·ªìn: {'D·ªØ li·ªáu B√¨nh ƒê·ªãnh' if source == 'elasticsearch' else 'Ki·∫øn th·ª©c chung'}")
            
            return {
                "search_results": context,
                "response": response,
                "error": False,
                # "source": "D·ªØ li·ªáu B√¨nh ƒê·ªãnh" if source == "elasticsearch" else "Ki·∫øn th·ª©c chung"
                
            }
    
    except asyncio.TimeoutError:
        total_time = time.time() - start_time
        print(f"Total processing time: {total_time:.2f}s (Timed out)")
        raise HTTPException(status_code=504, detail="M√¨nh x·ª≠ l√Ω h∆°i l√¢u, b·∫°n h·ªèi l·∫°i nh√©!")