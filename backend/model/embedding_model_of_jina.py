import requests
import os
from dotenv import load_dotenv

load_dotenv()

# L·∫•y Jina API Key
JINA_API_KEY = os.getenv("JINA_API_KEY")
if not JINA_API_KEY:
    raise ValueError("‚ùå Kh√¥ng t√¨m th·∫•y Jina API Key trong bi·∫øn m√¥i tr∆∞·ªùng!")

# Endpoint m·ªõi theo docs ch√≠nh th·ª©c c·ªßa Jina AI
JINA_API_URL = "https://api.jina.ai/v1/embeddings"
JINA_MODEL_NAME = "jina-embeddings-v3"
JINA_TASK = "text-matching"  # T√πy task b·∫°n c·∫ßn, docs c√≥ gi·∫£i th√≠ch r√µ
JINA_DIMENSIONS = 384  # D√πng b·∫£n base, docs n√≥i r√µ dimension n√†y

def get_embedding(text: str):
    """
    G·ªçi API Jina AI ƒë·ªÉ l·∫•y embedding cho vƒÉn b·∫£n.
    """
    if not text or not isinstance(text, str):
        raise ValueError("‚ùå ƒê·∫ßu v√†o ph·∫£i l√† m·ªôt chu·ªói vƒÉn b·∫£n h·ª£p l·ªá.")

    try:
        headers = {
            "Content-Type": "application/json",
            "Authorization": f"Bearer {JINA_API_KEY}",
        }

        payload = {
            "model": JINA_MODEL_NAME,
            "task": JINA_TASK,
            "dimensions": JINA_DIMENSIONS,
            "input": [text]  # B·ªçc v√†o list
        }

        response = requests.post(JINA_API_URL, headers=headers, json=payload)
        response.raise_for_status()

        result = response.json()
        if "data" not in result or not result["data"]:
            raise ValueError("‚ö†Ô∏è Ph·∫£n h·ªìi t·ª´ API kh√¥ng ch·ª©a tr∆∞·ªùng 'data' h·ª£p l·ªá.")

        return result["data"][0]["embedding"]

    except requests.exceptions.RequestException as e:
        raise RuntimeError(f"üö´ L·ªói g·ªçi API Jina AI: {str(e)}")
    except ValueError as e:
        raise RuntimeError(f"üö´ Ph·∫£n h·ªìi l·ªói t·ª´ Jina AI: {str(e)}")
    except Exception as e:
        raise RuntimeError(f"üö´ L·ªói kh√¥ng x√°c ƒë·ªãnh: {str(e)}")

# Test CLI nh·ªè g·ªçn
if __name__ == "__main__":
    while True:
        user_input = input("\nüí¨ Nh·∫≠p vƒÉn b·∫£n (ho·∫∑c 'exit'): ")
        if user_input.lower() == 'exit':
            break
        try:
            vector = get_embedding(user_input)
            print(f"‚úÖ Vector embedding c√≥ {len(vector)} chi·ªÅu.")
            print("‚ñ∂Ô∏è 5 ph·∫ßn t·ª≠ ƒë·∫ßu:", vector[:5], "...")
        except Exception as err:
            print(f"[‚ùå ERROR]: {err}")
